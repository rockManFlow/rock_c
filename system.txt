【】应用1
用于执行libevent相关项目
打包静态依赖库命令
    gcc event-server.c util.c ../lib/libevent/*.a -o event-server
    gcc event-client.c util.c ../lib/libevent/*.a -o event-client
    gcc bufferevent_client.c ../lib/libevent/*.a -o bufferevent_client
验证结果
    验证是可用的


【】应用2
ffmpeg好像不支持Mac等系统
打静态包
    gcc my.c ../../lib/ffmpeg/*.a -o my_ffmpeg
    Clang my.c ../../lib/ffmpeg/*.a  -o my_ffmpeg
    //动态和静态库同时连接命令---最后的-Wl,-Bdynamic表示将缺省库链接模式恢复成动态链接。
    gcc my.c -L. -Wl,-Bdynamic -l动态包名 -Wl,-Bstatic -l静态包名  -Wl,-Bdynamic

    gcc my.c -L. -Wl,-Bdynamic /usr/local/* -Wl,-Bstatic ../../lib/ffmpeg/*.a  -Wl,-Bdynamic -o my_ffmpeg


【】cmake等方式步骤
C项目正确的编译安装方式学
make make install


C语言编译器是GCC
【】gcc/g++与make区别：
当你的程序只有一个源文件时，直接就可以用gcc命令编译它。但是当你的程序包含很多个源文件时，用gcc命令逐个去编译时，你就很容易混乱而且工作量大.
所以出现了make工具！make工具可以看成是一个智能的批处理工具，它本身并没有编译和链接的功能，而是用类似于批处理的方式—通过调用makefile文件中用户指定的命令来进行编译和链接的。


【】make与cmake区别：
makefile在一些简单的工程完全可以人工手下，但是当工程非常大的时候，手写makefile也是非常麻烦的，如果换了个平台makefile又要重新修改。
这时候就出现了Cmake这个工具，cmake就可以更加简单的生成makefile文件给上面那个make用。当然cmake还有其他功能，就是可以跨平台生成对应平台能用的makefile，你不用再自己去修改了。




【】实现完成之后，通过java来调用实现的服务端和客户端逻辑代码
【】ffmpeg项目学习

---------------------------------------------------------------------------






