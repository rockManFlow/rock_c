【】应用1
用于执行libevent相关项目
打包静态依赖库命令
    gcc event-server.c util.c ../lib/libevent/*.a -o event-server
    gcc event-client.c util.c ../lib/libevent/*.a -o event-client
    gcc bufferevent_client.c ../lib/libevent/*.a -o bufferevent_client
验证结果
    验证是可用的


【】应用2
ffmpeg好像不支持Mac等系统
打静态包
    gcc my.c ../../lib/ffmpeg/*.a -o my_ffmpeg
    Clang my.c ../../lib/ffmpeg/*.a  -o my_ffmpeg
    //动态和静态库同时连接命令---最后的-Wl,-Bdynamic表示将缺省库链接模式恢复成动态链接。
    gcc my.c -L. -Wl,-Bdynamic -l动态包名 -Wl,-Bstatic -l静态包名  -Wl,-Bdynamic

    gcc my.c -L. -Wl,-Bdynamic /usr/local/* -Wl,-Bstatic ../../lib/ffmpeg/*.a  -Wl,-Bdynamic -o my_ffmpeg


【】cmake等方式步骤
C项目正确的编译安装方式学
make make install


C语言编译器是GCC
【】gcc/g++与make区别：
当你的程序只有一个源文件时，直接就可以用gcc命令编译它。但是当你的程序包含很多个源文件时，用gcc命令逐个去编译时，你就很容易混乱而且工作量大.
所以出现了make工具！make工具可以看成是一个智能的批处理工具，它本身并没有编译和链接的功能，而是用类似于批处理的方式—通过调用makefile文件中用户指定的命令来进行编译和链接的。

【】make的作用
make 命令是 Unix/Linux 系统中用于自动化构建（包括编译和链接）程序的工具。
对于大型项目，手动编译所有的源文件会非常繁琐。make 命令可以根据 Makefile 中的规则自动确定哪些文件需要编译，并只编译那些文件。
Makefile文件具有平台相关性（不同平台对应的文件内容不一样）

【】configure脚本与cmake的区别
configure脚本和CMake都是用于准备和编译软件项目的工具。
平台适应性：configure脚本通常与特定的系统或平台紧密相关，而CMake则是一个跨平台的工具，可以生成适应多种操作系统的编译配置文件。
使用方式：configure脚本通常通过运行脚本来工作，而CMake则使用CMakeLists.txt文件来描述项目的编译过程。
效率：在构建大型项目时，CMake由于其工具链的简化和高效的构建过程，通常比使用configure脚本的方法更快。
可扩展性：CMake允许用户为其编写特定功能的模块，从而扩展其功能，而configure脚本在这方面通常没有这么灵活。

configure也是会生成Makefile文件。

使用configure安装编译源码的步骤：configure-make-make install
cmake步骤：cmake-make-make install


【】make与cmake区别：
makefile在一些简单的工程完全可以人工手下，但是当工程非常大的时候，手写makefile也是非常麻烦的，如果换了个平台makefile又要重新修改。
这时候就出现了Cmake这个工具，cmake就可以更加简单的生成makefile文件给上面那个make用。当然cmake还有其他功能，就是可以跨平台生成对应平台能用的makefile，你不用再自己去修改了。

【】静态链接与动态链接的区别
静态链接的过程就已经把要链接的内容已经链接到了生成的可执行文件中，就算你在去把静态库删除也不会影响可执行程序的执行；
而动态链接这个过程却没有把内容链接进去，而是在执行的过程中，再去找要链接的内容，生成的可执行文件中并没有要链接的内容，所以当你删除动态库时，可执行程序就不能运行。

【】gcc命令（包括四步骤：预处理、编译、汇编、链接--统称编译成可执行文件）
GCC（GNU Compiler Collection）是一个强大的编译器，用于将源代码编译成可执行文件。
其基本用法为：gcc [options] [filenames]，其中options是编译器所需要的参数，filenames给出相关的文件名称。
参数：
-E：预处理 后即停止。
-S：预处理+编译 后即停止。
-c：只预处理、编译、汇编，不链接，生成目标文件（.o文件），不进行链接操作。这通常用于编译不包含主程序的子程序文件。（没有这个参数会直接编译成可执行文件）
-o output_filename：确定输出文件的名称为output_filename。如果不给出这个选项，GCC会给出默认的可执行文件a.out。
-g：生成调试信息，这在使用GNU的gdb进行源代码级别的调试时非常有用。
-Wall：打开所有警告信息，帮助开发者发现和修正潜在的问题。
-O，-O2，-O3：这些是优化选项，用于对程序进行不同程度的优化编译和链接。通常，优化级别越高，编译链接过程会更慢，但生成的代码可能执行效率更高。
-I <dir>：添加头文件搜索路径，告诉编译器在指定的目录中搜索头文件。
-L <dir>：添加库文件搜索路径。
-l <library>：链接指定的库文件
-static：阻止链接共享库
ar：把多个目标目标文件放到指定静态库文件中。ar -rc libsum.a sum.o xxx.o 多个目标文件打入到libsum.a静态库中
构建自己的动态链接库 ：gcc -shared ./thirdparty/sum.c -o libsum.so



gcc -o test xx.o xxx.o ... 转成可运行文件


【】实现完成之后，通过java来调用实现的服务端和客户端逻辑代码
【】ffmpeg项目学习

---------------------------------------------------------------------------






