#设置cmake版本
cmake_minimum_required(VERSION 3.10)

#项目名字
可以用来指定工程的名字和支持的语言，默认支持所有的语言。
project(XXXX)            ===>          指定了工程的名字,并且支持所有语言
project(XXXX CXX)     ===>        指定了工程的名字,并且支持的语言是C++
project(XXXX C CXX)  ===>       指定了工程的名字，并且支持的语言是C 和 C++


#都指向了当前的工作目录
PROJECT_BINARY_DIR（编译输出路径）和PROJECT_SOURCE_DIR（工程路径）

#SET关键字-用来显示指定变量
SET(SRC_LIST main.cpp) ==> SRC_LIST变量就包含了main.cpp
SET(SRC_LIST main.cpp demo1.cpp demo3.cpp demo1.h) ==> SRC_LIST变量就包含了main.cpp demo1.cpp demo3.cpp demo1.h
2、设置使用g++编译器
set(CMAKE_CXX_COMPILER "g++")--》CMAKE_CXX_COMPILER和CMAKE_CXX_STANDARD属于cmake系统参数
3、设置编译版本
set(CMAKE_CXX_STANDARD 10)
4、声明头文件路径
set(INC_DIR ./include)
5、指定生成文件的输出路径并从设置的参数中取值
set(PROJECT_BINARY_DIR /Users/opayc/products/rock_c/output)
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)



#MESSAGE关键字--向终端输出用户自定义的信息
主要包含三种信息:
SEND_ERROR    ==>   产生错误,生成编译过程中被跳过
STAUS                 ==>   输出前缀为一的信息
FATAL_ERROR   ==>   立即终止所有cmake过程
message(STATUS "This is BINARY dir" $(PROJECT_BINARY_DIR))
message(STATUS "This is SOURCE dir"  $(PROJECT_SOURCE_DIR))


#add_executable生成可执行文件
ADD_EXECUTABLE(hello ${SRC_LIST})   ===>  生成可执行文件hello,源文件读取变量SRC_LIST中的内容
ADD_EXECUTABLE(hello main.cpp) ===> 也可以直接填写 main.cpp
ADD_EXECUTABLE(hello main.cpp demo.cpp)
工程名和生成的可执行文件hello是没有任何关系 ==> 工程名和可执行



#内部构建和外部构建
内部构建: 上述例子就是内部构建，他产生的临时文件特别多，不方便清理。
外部构建:  就会把生成的临时文件放到build目录下，不会对源文件源任何影响
推荐使用外部构建:
1.建立一个build目录,可以是任何地方，建立在当前目录下
2.进入build,运行cmake .. ==> 表示上级目录,你可以写CMakeLists.txt所在的绝对路径，生成的文件都在build目录下了
3.在build目录下，运行make来构建项目
使用外部构建
PROJECT_SOURCE_DIR ==> 指工程路径
PROJECT_BINARY_DIR ==> 编译路径             build目录的绝对路径


#ADD_SUBDIRECTORY(source_dir [binary_dir] [EXECLUDE_FROM_ALL])
1.这个指令用于向当前工程添加存放源文件的子目录,并可以指定中间二进制和目标二进制存放的位置。
2.EXECLUDE_FROM_ALL函数从将某个目录排除在外
ADD_SUBDIRECTORY(src bin)
1.将src子目录加入工程并指定编译输出(包含编译中间结果) 路径为bin目录
2.如果不进行bin目录的指定，那么编译结果(包括中间结果)都将存放在build 和 src下


添加子CMakeLists.txt文件
add_subdirectory 是 CMake 命令之一，用于在当前 CMakeLists.txt 文件中引入另一个子目录的 CMake 构建。
这样，你可以在一个项目中组织多个子项目或子模块的构建。
示例
project_root/
|-- CMakeLists.txt
|-- src/
|   |-- main.cpp
|-- include/
|   |-- my_library/
|       |-- header1.h
|-- subproject/
|   |-- CMakeLists.txt
|   |-- sub_main.cpp

# 在project_root/CMakeLists.txt中引入子目录
add_subdirectory(subproject) 会让 CMake 去处理指定路径subproject下的 CMakeLists.txt 文件，以构建和配置该子目录的内容。






#更改二进制的保存路径
SET 指令重新定义 EXECUTABLE_OUTPUT_PATH 和 LIBRARY_OUTPUT_PATH变量来指定最终的目标二进制的位置。
SET{EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin}
SET{LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib}



#安装？？？
一种是从代码编译后直接make install安装,一种是打包时指定目录安装。
指定目录安装:
make install DESTDIR=/xxx/xxx

cmake打包时指定目录--
使用CMAKE一个指令: INSTALL
INSTALL的安装可以包括:二进制、动态库、静态库、文件、目录、脚本等
使用CMake一个新的变量: CMAKE_INSTALL_PREFIX

INSTALL(FILES COPYRIGHT README DESTINATION xxx/xxx/xxx/)
FILES ====>文件
DESTINATION ===> 路径
1.可以写绝对路径
2.可以写相对路径，相对路径实际是: ${CMAKE_INSTALL_PREFIX}/<DESTINATION>
 CMAKE_INSTALL_PREFIX 默认是  /usr/local/
 cmake -DCMAKE_INSTALL_PREFIX=/usr 在cmake的时候指定CMAKE_INSTALL_PREFIX


#生成静态库和动态库-ps动态库和静态库名字不能一样，不然，只能执行一个
ADD_LIBRARY(hello SHARED ${LIBHELLO_SRC})
ADD_LIBRARY(hello_static STATIC ${LIBHELLO_SRC})

--在实际的开发过程中，我们往往希望静态库和动态库的名字相同
SET_TARGET_PROPERTIES ==> 这条指令可以用来设置输出的名称,对于动态库，还可以用来指定动态库版本和API版本
ADD_LIBRARY(hello_static STATIC ${LIBHELLO_SRC})
SET_TARGET_PROPERTIES(hello_static PROPERTIES OUTPUT_NAME "hello")--重命名为hello
SET_TARGET_PROPERTIES(hello_static PROPERTIES CLEAN_DIRECT_OUTPUT 1)--删除hello_static

ADD_LIBRARY(hello SHARED ${LIBHELLO_SRC})
SET_TARGET_PROPERTIES(hello PROPERTIES OUTPUT_NAME "hello")
SET_TARGET_PROPERTIES(hello PROPERTIES CLEAN_DIRECT_OUTPUT 1)
这样输出的静态和动态库的文件名就可以相同

动态库的版本号
SET_TARGET_PROPERTIES(hello PROPERTIES VERSION 1.2 SOVERSION 1)

#引入头文件
include_directories(${INC_DIR}/ffmpeg/)
#引入库文件
link_directories(${LINK_DIR}/ffmpeg/)

#将第三方库链接在一起
target_link_libraries(rock_c avcodec avdevice
        avfilter
        avformat
        avutil
        swresample
        swscale
        )